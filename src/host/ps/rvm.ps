%!PS
%
% @@(replace "';%u=>vC=>vQC=>vQ@=>vQ@=>vQ9=>vQ<=k[%9lkv5[&9lkl[$9lkmy" (encode-writable-ascii "\\()")
/input (';%u=>vC=>vQC=>vQ@=>vQ@=>vQ9=>vQ<=k[%9lkv5[&9lkl[$9lkmy) def
% )@@


% Your version of the RVM will be slighly different from the other ones.
% Because the RVM embeds the bytecode inside of a string, only a limited
% set of characters can be used. As it turns out, PostScript doesn't allow
% the use of the characters '(', ')', and '\', which are normally used inside 
% the RVM bytecode.
%
% To work around this, the bytecode is slighly modified to avoid using those 
% characters, but this modifies the way you must decode it. The only modification
% that should be done from a standard RVM is to change the definition of the
% get_code function, because the mapping from the characters to the codes are different.
% For you case, the available character (in order) are:
%
%   !"#$%&'*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNO
%  PQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~
%
% Thus, the get_code function must impement the following relation:
%
%    Ascii code | character  | Writable Character Map (output)
%    32-39      | space to ' | 0-7
%    42-91      | *     to [ | 8-57
%    93-126     | ]     to ~ | 58-91
%
% Good luck! And if you have trouble with this part feel free to reach out to me.
%
% Léonard

% Fonctions utiles
/append {
    /elem exch def
    /oldarr exch def
    /len oldarr length def

    /newarr len 1 add array def
    newarr 0 oldarr putinterval
    newarr len elem put
    newarr
} def

/pos -1 def

/get_byte {
    /pos 1 pos add def
    /byte input pos get def
    byte
} def

/get_code {
    
    /byte_value get_byte def

    %    32-39      | space to ' | 0-7
    byte_value 32 ge byte_value 39 le and {
        byte_value 32 sub
    } if

    %    42-91      | *     to [ | 8-57
    byte_value 42 ge byte_value 91 le and {
        byte_value 34 sub
    } if

    %    93-126     | ]     to ~ | 58-91
    byte_value 93 ge byte_value 126 le and {
        byte_value 35 sub
    } if

} def

/get_int {
    /accumulator exch def
    /next_byte get_code def
    /accumulator accumulator 46 mul def

    next_byte 46 lt {
        accumulator next_byte add
    } {
        accumulator next_byte add 46 sub get_int
    } ifelse
} def

% VM
/FALSE [0 0 5] def
/TRUE [0 0 5] def
/NIL [0 0 5] def

/stackk 0 def

/pushh {
    /s exch def
    /stackk [s stackk 0] def
} def

/popp {
    /x stackk 0 get def
    /stackk stackk 1 get def
    x
} def

/putchar {
    /c exch def
    /temp 1 string def
    temp 0 c put
    temp print
    flush
} def

/getchar {
    (%stdin) (r) file read 
    /bool exch def % la valeur bool de read
    bool not {
	-1 pushh
    } {
	/c exch def
	/temp 1 string def
	temp 0 c put
	temp {} forall % conversion en int
	/int exch def
	int pushh
    } ifelse
} def 

% Primitives
/prim1 {
    /f exch def
    {
        popp f pushh
    }
} def

/prim2 {
    /f exch def
    {
        popp popp f pushh
    }
} def

/prim3 {
    /f exch def
    {
        popp popp popp f pushh
    }
} def

/prim {
    /f exch def
    /n exch def
    {
        n {
            popp
        } repeat
        f
        pushh
    }
} def


/bool2scm {
    {TRUE}
    {FALSE} ifelse
} def

/is_rib {
    type /arraytype eq
} def

/field0set {
    /x exch def
    /y exch def

    x 0 y put
    x pushh
    y
} def

/field1set {
    /x exch def
    /y exch def

    x 1 y put
    x pushh
    y
} def

/field2set {
    /x exch def
    /y exch def

    x 2 y put
    x pushh
    y
} def

/primitives [
    {3 {/x exch def /y exch def /z exch def [x y z]} prim}                                      
    {1 {/x exch def x} prim}                                                                    
    {{[popp null] 1 get}}                                                                        
    {{[popp popp] 0 get pushh}}                                                                    
    {{[popp 0 get stackk 1] pushh}}                                                                     
    {1 {/x exch def x is_rib bool2scm} prim}                                                    
    {1 {/x exch def x 0 get} prim}                                                              
    {1 {/x exch def x 1 get} prim}                                                              
    {1 {/x exch def x 2 get} prim}                                                              
    {2 {field0set} prim}                                                                        
    {2 {field1set} prim}                                                                        
    {2 {field2set} prim}                                                                        
    {2 {/x exch def /y exch def x is_rib y is_rib or {x y eq} {x y eq} ifelse bool2scm} prim}   
    {2 {/x exch def /y exch def x y lt bool2scm} prim}                                          
    {2 {/x exch def /y exch def x y add} prim}                                                  
    {2 {/x exch def /y exch def x y sub} prim}                                                  
    {2 {/x exch def /y exch def x y mul} prim}                                                  
    {2 {/x exch def /y exch def x y div cvi} prim}                                              
    {{getchar}}                                                                                 
    {1 {putchar} prim}                                                                          
    {1 {stop} prim}                                                                             
    % "stop" à vérifier
] def

% ======================
% == (4) Symbol table ==
% ======================

/list_tail {
    /i exch def
    /lst exch def
    {   
        i 0 le { exit } if
        /lst lst 1 get def
        /i i 1 sub def
    } loop
    lst
} def

/symtbl NIL def

/n 0 get_int def

n {
    /symtbl [ [ FALSE [NIL 0 3] 2] symtbl 0] def
} repeat


/symbol_name NIL def
/symbol_name_len 0 def

{
    /c get_byte def
    c (,) 0 get eq {
        /symbol_to_append [FALSE [symbol_name symbol_name_len 3] 2] def
        /symtbl [symbol_to_append symtbl 0] def
        /symbol_name NIL def
        /symbol_name_len 0 def
    } {
        c (;) 0 get eq {
            /symbol_to_append [FALSE [symbol_name symbol_name_len 3] 2] def
            /symtbl [symbol_to_append symtbl 0] def
            exit
        } if

        /symbol_name [c symbol_name 0] def
        /symbol_name_len symbol_name_len 1 add def

    } ifelse
} loop

/symbol_ref {
    /n exch def
    symtbl n list_tail 0 get
} def

% ========================================
% == (5) Decoding of the RVM's bytecode ==
% ========================================

{
    
    /x get_code def
    /n x def
    /d 0 def
    /op 0 def
    {
        /d [20 30 0 10 11 4] op get def
        n 2 d add le { exit } if
        /n n d sub 3 sub def                                    
        /op op 1 add def
    } loop
    x 90 gt {
        /n popp def
    } {
	op 0 eq {
            /stackk [0 stackk 0] def
            /op op 1 add def
        } if
        n d eq {                               
	    /n 0 get_int def
        } {                                
	    n d ge {                           
		/n n d sub 1 sub get_int symbol_ref def
            } {
                op 3 lt {
		    /n n symbol_ref def
                } if
            } ifelse
        } ifelse
        4 op lt {
	    /n [ [n 0 popp] NIL 1 ] def
            stackk 0 eq { exit } if
            /op 4 def
        } if
    } ifelse
    stackk 0 [op 1 sub n stackk 0 get] put
} loop

% =======================
% == (6) RVM execution ==
% =======================
/pc n 0 get 2 get def

/get_opnd {
    /o exch def
    o is_rib {
        o
    } {
        stackk o list_tail
    } ifelse
} def

/get_cont {
    /s stackk def
    {
        s 2 get 0 ne {
            exit
        } if
        /s s 1 get def
    } loop
    s
} def

/set_global {
    /val exch def
    symtbl 0 get
    0 val put
    /symtbl symtbl 1 get def
} def


[0 symtbl 1] set_global
FALSE set_global
TRUE set_global
NIL set_global

/stackk [0 0 [5 0 0]] def
{
    /continue false def
    /o pc 1 get def
    /i pc 0 get def


    i 1 lt {


        /o o get_opnd 0 get def
        
        {


            /continue_inner false def
            
            /c o 0 get def
            
            c is_rib {

		/c2 [0 o 0] def
                /s2 c2 def
                
                /nparams c 0 get 2 idiv def
                
                {
		    
		    nparams 0 eq {
                        exit
                    } if

                    /s2 [popp s2 0] def
                    /nparams nparams 1 sub def
                } loop

                pc 2 get 0 ne {

		    c2 0 stackk put
                    c2 2 pc 2 get put
                } {

                    /k get_cont def
                    c2 0 k 0 get put
                    c2 2 k 2 get put
                } ifelse

                /stackk s2 def
            } {

	
        
                {
                    /o primitives c get exec exec def
                } stopped {
                    /o null def
                } if
                
                
		      
                
                o is_rib {
                    
                    /continue_inner true def

                } {
                    pc 2 get 0 ne {

			/c pc def
                        
                    } {

			/c get_cont def
                        stackk 1 c 0 get put
                    } ifelse
                    
                } ifelse
            } ifelse

            continue_inner not {
                
                /pc c def
                exit
            } if
            
        } loop
    } {
        i 2 lt {
            o get_opnd 0 stackk 0 get put
            /stackk stackk 1 get def
        } {
	    i 3 lt {

                o get_opnd 0 get pushh
                
            } {
                i 4 lt {

                    o pushh
                    
                } {
                    i 5 lt {

                        popp FALSE eq not {
                            /pc pc 1 get def
                            /continue true def
                        } if
                    } {
                        exit
                    } ifelse
                } ifelse
            } ifelse
        } ifelse
    } ifelse
    continue not {
        /pc pc 2 get def
    } if
    
} loop

